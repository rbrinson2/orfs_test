/* Generated by Yosys 0.33 (git sha1 2584903a060) */

(* dynports =  1  *)
(* hdlname = "\\multiplexer" *)
(* src = "multiplexer.sv:9.1-27.10" *)
module \$paramod$5ef3be0bfad1454aaa6432c4ab405bbd7cbab26b\multiplexer (in_bus, sel, out);
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _01_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _02_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _03_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _04_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _05_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _06_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _07_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _08_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _09_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [2:0] _10_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _11_;
  wire [31:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "multiplexer.sv:12.45-12.51" *)
  input [255:0] in_bus;
  wire [255:0] in_bus;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[0] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[1] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[2] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[3] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[4] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[5] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[6] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[7] ;
  (* src = "multiplexer.sv:14.45-14.48" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "multiplexer.sv:13.45-13.48" *)
  input [2:0] sel;
  wire [2:0] sel;
  function [31:0] _21_;
    input [31:0] a;
    input [255:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "multiplexer.sv:0.0-0.0" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _21_ = b[31:0];
      8'b??????1?:
        _21_ = b[63:32];
      8'b?????1??:
        _21_ = b[95:64];
      8'b????1???:
        _21_ = b[127:96];
      8'b???1????:
        _21_ = b[159:128];
      8'b??1?????:
        _21_ = b[191:160];
      8'b?1??????:
        _21_ = b[223:192];
      8'b1???????:
        _21_ = b[255:224];
      default:
        _21_ = a;
    endcase
  endfunction
  assign _12_ = _21_(32'hxxxxxxxx, { \input_array[0] , \input_array[1] , \input_array[2] , \input_array[3] , \input_array[4] , \input_array[5] , \input_array[6] , \input_array[7]  }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_ });
  assign _13_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h7;
  assign _14_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h6;
  assign _15_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h5;
  assign _16_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h4;
  assign _17_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h3;
  assign _18_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h2;
  assign _19_ = _10_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 3'h1;
  assign _20_ = ! (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) _10_;
  assign out = _11_;
  assign _10_ = sel;
  assign _01_ = in_bus[255:224];
  assign _02_ = in_bus[223:192];
  assign _03_ = in_bus[191:160];
  assign _04_ = in_bus[159:128];
  assign _05_ = in_bus[127:96];
  assign _06_ = in_bus[95:64];
  assign _07_ = in_bus[63:32];
  assign _08_ = in_bus[31:0];
  assign _00_ = _09_;
  assign _09_ = _12_;
  assign \input_array[0]  = in_bus[255:224];
  assign \input_array[1]  = in_bus[223:192];
  assign \input_array[2]  = in_bus[191:160];
  assign \input_array[3]  = in_bus[159:128];
  assign \input_array[4]  = in_bus[127:96];
  assign \input_array[5]  = in_bus[95:64];
  assign \input_array[6]  = in_bus[63:32];
  assign \input_array[7]  = in_bus[31:0];
  assign _11_ = _12_;
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer" *)
(* src = "multiplexer.sv:9.1-27.10" *)
module \$paramod$6a3d32cf08b5e9a4d56891e3d8781ccd4215c4af\multiplexer (in_bus, sel, out);
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _01_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _02_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _03_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire _04_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _05_;
  wire [31:0] _06_;
  wire _07_;
  wire _08_;
  (* src = "multiplexer.sv:12.45-12.51" *)
  input [63:0] in_bus;
  wire [63:0] in_bus;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[0] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[1] ;
  (* src = "multiplexer.sv:14.45-14.48" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "multiplexer.sv:13.45-13.48" *)
  input sel;
  wire sel;
  function [31:0] _09_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "multiplexer.sv:0.0-0.0" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _09_ = b[31:0];
      2'b1?:
        _09_ = b[63:32];
      default:
        _09_ = a;
    endcase
  endfunction
  assign _06_ = _09_(32'hxxxxxxxx, { \input_array[0] , \input_array[1]  }, { _08_, _07_ });
  assign _08_ = ~ (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) _04_;
  assign out = _05_;
  assign _04_ = sel;
  assign _01_ = in_bus[63:32];
  assign _02_ = in_bus[31:0];
  assign _00_ = _03_;
  assign _07_ = _04_;
  assign _03_ = _06_;
  assign \input_array[0]  = in_bus[63:32];
  assign \input_array[1]  = in_bus[31:0];
  assign _05_ = _06_;
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer" *)
(* src = "multiplexer.sv:9.1-27.10" *)
module \$paramod$99da07bf27abaac915a8c95d36d6f2808394e702\multiplexer (in_bus, sel, out);
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _01_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _02_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _03_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _04_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _05_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [1:0] _06_;
  (* src = "multiplexer.sv:0.0-0.0" *)
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "multiplexer.sv:12.45-12.51" *)
  input [127:0] in_bus;
  wire [127:0] in_bus;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[0] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[1] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[2] ;
  (* src = "multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[3] ;
  (* src = "multiplexer.sv:14.45-14.48" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "multiplexer.sv:13.45-13.48" *)
  input [1:0] sel;
  wire [1:0] sel;
  function [31:0] _13_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "multiplexer.sv:0.0-0.0" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _13_ = b[31:0];
      4'b??1?:
        _13_ = b[63:32];
      4'b?1??:
        _13_ = b[95:64];
      4'b1???:
        _13_ = b[127:96];
      default:
        _13_ = a;
    endcase
  endfunction
  assign _08_ = _13_(32'hxxxxxxxx, { \input_array[0] , \input_array[1] , \input_array[2] , \input_array[3]  }, { _12_, _11_, _10_, _09_ });
  assign _09_ = _06_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 2'h3;
  assign _10_ = _06_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 2'h2;
  assign _11_ = _06_ == (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) 2'h1;
  assign _12_ = ! (* full_case = 32'd1 *) (* src = "multiplexer.sv:0.0-0.0" *) _06_;
  assign out = _07_;
  assign _06_ = sel;
  assign _01_ = in_bus[127:96];
  assign _02_ = in_bus[95:64];
  assign _03_ = in_bus[63:32];
  assign _04_ = in_bus[31:0];
  assign _00_ = _05_;
  assign _05_ = _08_;
  assign \input_array[0]  = in_bus[127:96];
  assign \input_array[1]  = in_bus[95:64];
  assign \input_array[2]  = in_bus[63:32];
  assign \input_array[3]  = in_bus[31:0];
  assign _07_ = _08_;
endmodule

(* dynports =  1  *)
(* hdlname = "\\register" *)
(* src = "register.sv:9.1-27.10" *)
module \$paramod$e358a763f16798cd10903dfd37e7986c0fbbe40f\register (clock, reset, write_enable, next, value);
  (* src = "register.sv:23.4-25.45" *)
  wire [31:0] _0_;
  (* src = "register.sv:0.0-0.0" *)
  wire [31:0] _1_;
  wire [31:0] _2_;
  wire _3_;
  (* src = "register.sv:13.12-13.17" *)
  input clock;
  wire clock;
  (* src = "register.sv:16.24-16.28" *)
  input [31:0] next;
  wire [31:0] next;
  (* src = "register.sv:14.12-14.17" *)
  input reset;
  wire reset;
  (* src = "register.sv:18.30-18.35" *)
  output [31:0] value;
  reg [31:0] value = 32'd4194304;
  (* src = "register.sv:15.12-15.24" *)
  input write_enable;
  wire write_enable;
  (* \always_ff  = 32'd1 *)
  (* src = "register.sv:23.4-25.45" *)
  always @(posedge clock, posedge reset)
    if (reset) value <= 32'd4194304;
    else value <= _2_;
  assign _2_ = _3_ ? (* src = "register.sv:25.17-25.29|register.sv:25.13-25.45" *) next : value;
  assign _1_ = 32'd4194304;
  assign _3_ = write_enable;
  assign _0_ = _2_;
endmodule

(* dynports =  1  *)
(* hdlname = "\\adder" *)
(* src = "adder.sv:9.1-19.10" *)
module \$paramod\adder\WIDTH=s32'00000000000000000000000000100000 (operand_a, operand_b, result);
  (* src = "adder.sv:17.21-17.42" *)
  wire [31:0] _0_;
  (* src = "adder.sv:12.24-12.33" *)
  input [31:0] operand_a;
  wire [31:0] operand_a;
  (* src = "adder.sv:13.24-13.33" *)
  input [31:0] operand_b;
  wire [31:0] operand_b;
  (* src = "adder.sv:14.24-14.30" *)
  output [31:0] result;
  wire [31:0] result;
  assign _0_ = operand_a + (* src = "adder.sv:17.21-17.42" *) operand_b;
  assign result = _0_;
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer2" *)
(* src = "multiplexer2.sv:9.1-27.10" *)
module \$paramod\multiplexer2\WIDTH=s32'00000000000000000000000000100000 (in0, in1, sel, out);
  (* src = "multiplexer2.sv:12.24-12.27" *)
  input [31:0] in0;
  wire [31:0] in0;
  (* src = "multiplexer2.sv:13.24-13.27" *)
  input [31:0] in1;
  wire [31:0] in1;
  (* src = "multiplexer2.sv:15.24-15.27" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "multiplexer2.sv:14.24-14.27" *)
  input sel;
  wire sel;
  (* module_not_derived = 32'd1 *)
  (* src = "multiplexer2.sv:21.7-25.6" *)
  \$paramod$6a3d32cf08b5e9a4d56891e3d8781ccd4215c4af\multiplexer  multiplexer (
    .in_bus({ in0, in1 }),
    .out(out),
    .sel(sel)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer4" *)
(* src = "multiplexer4.sv:9.1-29.10" *)
module \$paramod\multiplexer4\WIDTH=s32'00000000000000000000000000100000 (in0, in1, in2, in3, sel, out);
  (* src = "multiplexer4.sv:12.24-12.27" *)
  input [31:0] in0;
  wire [31:0] in0;
  (* src = "multiplexer4.sv:13.24-13.27" *)
  input [31:0] in1;
  wire [31:0] in1;
  (* src = "multiplexer4.sv:14.24-14.27" *)
  input [31:0] in2;
  wire [31:0] in2;
  (* src = "multiplexer4.sv:15.24-15.27" *)
  input [31:0] in3;
  wire [31:0] in3;
  (* src = "multiplexer4.sv:17.24-17.27" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "multiplexer4.sv:16.24-16.27" *)
  input [1:0] sel;
  wire [1:0] sel;
  (* module_not_derived = 32'd1 *)
  (* src = "multiplexer4.sv:23.7-27.6" *)
  \$paramod$99da07bf27abaac915a8c95d36d6f2808394e702\multiplexer  multiplexer (
    .in_bus({ in0, in1, in2, in3 }),
    .out(out),
    .sel(sel)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer8" *)
(* src = "multiplexer8.sv:9.1-33.10" *)
module \$paramod\multiplexer8\WIDTH=s32'00000000000000000000000000100000 (in0, in1, in2, in3, in4, in5, in6, in7, sel, out);
  (* src = "multiplexer8.sv:12.24-12.27" *)
  input [31:0] in0;
  wire [31:0] in0;
  (* src = "multiplexer8.sv:13.24-13.27" *)
  input [31:0] in1;
  wire [31:0] in1;
  (* src = "multiplexer8.sv:14.24-14.27" *)
  input [31:0] in2;
  wire [31:0] in2;
  (* src = "multiplexer8.sv:15.24-15.27" *)
  input [31:0] in3;
  wire [31:0] in3;
  (* src = "multiplexer8.sv:16.24-16.27" *)
  input [31:0] in4;
  wire [31:0] in4;
  (* src = "multiplexer8.sv:17.24-17.27" *)
  input [31:0] in5;
  wire [31:0] in5;
  (* src = "multiplexer8.sv:18.24-18.27" *)
  input [31:0] in6;
  wire [31:0] in6;
  (* src = "multiplexer8.sv:19.24-19.27" *)
  input [31:0] in7;
  wire [31:0] in7;
  (* src = "multiplexer8.sv:21.24-21.27" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "multiplexer8.sv:20.24-20.27" *)
  input [2:0] sel;
  wire [2:0] sel;
  (* module_not_derived = 32'd1 *)
  (* src = "multiplexer8.sv:27.7-31.6" *)
  \$paramod$5ef3be0bfad1454aaa6432c4ab405bbd7cbab26b\multiplexer  multiplexer (
    .in_bus({ in0, in1, in2, in3, in4, in5, in6, in7 }),
    .out(out),
    .sel(sel)
  );
endmodule

(* hdlname = "\\alu" *)
(* src = "alu.sv:9.1-82.10" *)
module alu(alu_function, operand_a, operand_b, result, result_equal_zero);
  (* src = "alu.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "alu.sv:0.0-0.0" *)
  wire [31:0] _01_;
  (* src = "alu.sv:28.34-28.58" *)
  wire [31:0] _02_;
  (* src = "alu.sv:38.34-38.58" *)
  wire [31:0] _03_;
  (* src = "alu.sv:23.33-23.48" *)
  wire _04_;
  (* src = "alu.sv:33.42-33.64" *)
  wire _05_;
  (* src = "alu.sv:34.42-34.63" *)
  wire _06_;
  (* src = "alu.sv:35.41-35.84" *)
  wire _07_;
  (* src = "alu.sv:37.35-37.59" *)
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "alu.sv:30.34-30.63" *)
  wire [31:0] _21_;
  (* src = "alu.sv:31.34-31.63" *)
  wire [31:0] _22_;
  (* src = "alu.sv:32.34-32.63" *)
  wire [31:0] _23_;
  (* src = "alu.sv:29.34-29.58" *)
  wire [31:0] _24_;
  (* src = "alu.sv:36.34-36.58" *)
  wire [31:0] _25_;
  (* src = "alu.sv:10.25-10.37" *)
  input [4:0] alu_function;
  wire [4:0] alu_function;
  (* src = "alu.sv:11.25-11.34" *)
  input [31:0] operand_a;
  wire [31:0] operand_a;
  (* src = "alu.sv:12.25-12.34" *)
  input [31:0] operand_b;
  wire [31:0] operand_b;
  (* src = "alu.sv:13.25-13.31" *)
  output [31:0] result;
  wire [31:0] result;
  (* src = "alu.sv:14.25-14.42" *)
  output result_equal_zero;
  wire result_equal_zero;
  assign _02_ = $signed(operand_a) + (* src = "alu.sv:28.34-28.58" *) $signed(operand_b);
  assign _03_ = $signed(operand_a) & (* src = "alu.sv:38.34-38.58" *) $signed(operand_b);
  assign _04_ = ! (* src = "alu.sv:23.33-23.48" *) result;
  assign _05_ = $signed(operand_a) == (* src = "alu.sv:33.42-33.64" *) $signed(operand_b);
  assign _06_ = $signed(operand_a) < (* src = "alu.sv:34.42-34.63" *) $signed(operand_b);
  assign _07_ = operand_a < (* src = "alu.sv:35.41-35.84" *) operand_b;
  assign _08_ = $signed(operand_a) | (* src = "alu.sv:37.35-37.59" *) $signed(operand_b);
  function [31:0] _33_;
    input [31:0] a;
    input [351:0] b;
    input [10:0] s;
    (* full_case = 32'd1 *)
    (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *)
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        _33_ = b[31:0];
      11'b?????????1?:
        _33_ = b[63:32];
      11'b????????1??:
        _33_ = b[95:64];
      11'b???????1???:
        _33_ = b[127:96];
      11'b??????1????:
        _33_ = b[159:128];
      11'b?????1?????:
        _33_ = b[191:160];
      11'b????1??????:
        _33_ = b[223:192];
      11'b???1???????:
        _33_ = b[255:224];
      11'b??1????????:
        _33_ = b[287:256];
      11'b?1?????????:
        _33_ = b[319:288];
      11'b1??????????:
        _33_ = b[351:320];
      default:
        _33_ = a;
    endcase
  endfunction
  assign _09_ = _33_(32'd0, { _02_, _24_, _21_, _22_, _23_, 31'h00000000, _05_, 31'h00000000, _06_, 31'h00000000, _07_, _25_, _08_, _03_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  assign _10_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h0b;
  assign _11_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h0a;
  assign _12_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h09;
  assign _13_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h08;
  assign _14_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h07;
  assign _15_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h06;
  assign _16_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h05;
  assign _17_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h04;
  assign _18_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h03;
  assign _19_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h02;
  assign _20_ = alu_function == (* full_case = 32'd1 *) (* src = "alu.sv:0.0-0.0|alu.sv:27.9-71.16" *) 5'h01;
  assign _21_ = $signed(operand_a) << (* src = "alu.sv:30.34-30.63" *) operand_b[4:0];
  assign _22_ = $signed(operand_a) >> (* src = "alu.sv:31.34-31.63" *) operand_b[4:0];
  assign _23_ = $signed(operand_a) >>> (* src = "alu.sv:32.34-32.63" *) operand_b[4:0];
  assign _24_ = $signed(operand_a) - (* src = "alu.sv:29.34-29.58" *) $signed(operand_b);
  assign _25_ = $signed(operand_a) ^ (* src = "alu.sv:36.34-36.58" *) $signed(operand_b);
  assign result_equal_zero = _04_;
  assign _00_ = _01_;
  assign _01_ = _09_;
  assign result = _09_;
endmodule

(* hdlname = "\\alu_control" *)
(* src = "alu_control.sv:9.1-92.10" *)
module alu_control(alu_op_type, inst_funct3, inst_funct7, alu_function);
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _00_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _01_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _02_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _03_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _04_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _05_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _06_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _07_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _08_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _09_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _10_;
  (* src = "alu_control.sv:0.0-0.0" *)
  wire [4:0] _11_;
  wire [4:0] _12_;
  (* src = "alu_control.sv:42.31-42.56" *)
  wire _13_;
  (* src = "alu_control.sv:42.13-42.56" *)
  wire _14_;
  wire [4:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire [4:0] _22_;
  wire _23_;
  wire _24_;
  wire [4:0] _25_;
  wire _26_;
  wire [4:0] _27_;
  wire _28_;
  wire [4:0] _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  (* src = "alu_control.sv:13.24-13.36" *)
  output [4:0] alu_function;
  wire [4:0] alu_function;
  (* src = "alu_control.sv:10.24-10.35" *)
  input [1:0] alu_op_type;
  wire [1:0] alu_op_type;
  (* src = "alu_control.sv:20.17-20.29" *)
  wire [4:0] branch_funct;
  (* src = "alu_control.sv:16.17-16.30" *)
  wire [4:0] default_funct;
  (* src = "alu_control.sv:11.24-11.35" *)
  input [2:0] inst_funct3;
  wire [2:0] inst_funct3;
  (* src = "alu_control.sv:12.24-12.35" *)
  input [6:0] inst_funct7;
  wire [6:0] inst_funct7;
  (* src = "alu_control.sv:18.17-18.25" *)
  wire [4:0] op_funct;
  (* src = "alu_control.sv:19.17-19.29" *)
  wire [4:0] op_imm_funct;
  (* src = "alu_control.sv:17.17-17.32" *)
  wire [4:0] secondary_funct;
  (* full_case = 32'd1 *)
  (* src = "alu_control.sv:47.9-57.16" *)
  reg [4:0] \$auto$proc_rom.cc:150:do_switch$81  [7:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$81 [0] = 5'h01;
    \$auto$proc_rom.cc:150:do_switch$81 [1] = 5'h03;
    \$auto$proc_rom.cc:150:do_switch$81 [2] = 5'h07;
    \$auto$proc_rom.cc:150:do_switch$81 [3] = 5'h08;
    \$auto$proc_rom.cc:150:do_switch$81 [4] = 5'h09;
    \$auto$proc_rom.cc:150:do_switch$81 [5] = 5'h04;
    \$auto$proc_rom.cc:150:do_switch$81 [6] = 5'h0a;
    \$auto$proc_rom.cc:150:do_switch$81 [7] = 5'h0b;
  end
  assign _12_ = \$auto$proc_rom.cc:150:do_switch$81 [inst_funct3];
  assign _13_ = inst_funct3[1:0] == (* src = "alu_control.sv:42.31-42.56" *) 2'h1;
  assign _14_ = inst_funct7[5] && (* src = "alu_control.sv:42.13-42.56" *) _13_;
  function [4:0] _38_;
    input [4:0] a;
    input [29:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        _38_ = b[4:0];
      6'b????1?:
        _38_ = b[9:5];
      6'b???1??:
        _38_ = b[14:10];
      6'b??1???:
        _38_ = b[19:15];
      6'b?1????:
        _38_ = b[24:20];
      6'b1?????:
        _38_ = b[29:25];
      default:
        _38_ = a;
    endcase
  endfunction
  assign _15_ = _38_(5'hxx, 30'h0c639d08, { _21_, _20_, _19_, _18_, _17_, _16_ });
  assign _16_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *) 3'h7;
  assign _17_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *) 3'h6;
  assign _18_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *) 3'h5;
  assign _19_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *) 3'h4;
  assign _20_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *) 3'h1;
  assign _21_ = ! (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:67.9-75.16" *) inst_funct3;
  function [4:0] _45_;
    input [4:0] a;
    input [9:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "alu_control.sv:0.0-0.0|alu_control.sv:60.9-64.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _45_ = b[4:0];
      2'b1?:
        _45_ = b[9:5];
      default:
        _45_ = a;
    endcase
  endfunction
  assign _22_ = _45_(5'hxx, 10'h045, { _24_, _23_ });
  assign _23_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:60.9-64.16" *) 3'h5;
  assign _24_ = ! (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:60.9-64.16" *) inst_funct3;
  assign _25_ = _26_ ? (* full_case = 32'd1 *) (* src = "alu_control.sv:42.13-42.56|alu_control.sv:42.9-44.46" *) secondary_funct : default_funct;
  assign _27_ = _28_ ? (* full_case = 32'd1 *) (* src = "alu_control.sv:35.13-35.27|alu_control.sv:35.9-39.58" *) secondary_funct : default_funct;
  function [4:0] _50_;
    input [4:0] a;
    input [19:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "alu_control.sv:0.0-0.0|alu_control.sv:26.9-32.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _50_ = b[4:0];
      4'b??1?:
        _50_ = b[9:5];
      4'b?1??:
        _50_ = b[14:10];
      4'b1???:
        _50_ = b[19:15];
      default:
        _50_ = a;
    endcase
  endfunction
  assign _29_ = _50_(5'hxx, { 5'h01, op_funct, op_imm_funct, branch_funct }, { _33_, _32_, _31_, _30_ });
  assign _30_ = alu_op_type == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:26.9-32.16" *) 2'h1;
  assign _31_ = alu_op_type == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:26.9-32.16" *) 2'h3;
  assign _32_ = alu_op_type == (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:26.9-32.16" *) 2'h2;
  assign _33_ = ! (* full_case = 32'd1 *) (* src = "alu_control.sv:0.0-0.0|alu_control.sv:26.9-32.16" *) alu_op_type;
  assign _01_ = _07_;
  assign _05_ = _11_;
  assign _02_ = _08_;
  assign _04_ = _10_;
  assign _03_ = _09_;
  assign _00_ = _06_;
  assign _07_ = _15_;
  assign _11_ = _22_;
  assign _08_ = _12_;
  assign _26_ = _14_;
  assign _10_ = _25_;
  assign _28_ = inst_funct7[5];
  assign _09_ = _27_;
  assign _06_ = _29_;
  assign branch_funct = _15_;
  assign secondary_funct = _22_;
  assign default_funct = _12_;
  assign op_imm_funct = _25_;
  assign op_funct = _27_;
  assign alu_function = _29_;
endmodule

(* hdlname = "\\control_transfer" *)
(* src = "control_transfer.sv:9.1-26.10" *)
module control_transfer(result_equal_zero, inst_funct3, take_branch);
  (* src = "control_transfer.sv:0.0-0.0" *)
  wire _00_;
  (* src = "control_transfer.sv:0.0-0.0" *)
  wire _01_;
  (* src = "control_transfer.sv:17.36-17.54" *)
  wire _02_;
  (* src = "control_transfer.sv:19.36-19.54" *)
  wire _03_;
  (* src = "control_transfer.sv:21.35-21.53" *)
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "control_transfer.sv:11.18-11.29" *)
  input [2:0] inst_funct3;
  wire [2:0] inst_funct3;
  (* src = "control_transfer.sv:10.18-10.35" *)
  input result_equal_zero;
  wire result_equal_zero;
  (* src = "control_transfer.sv:12.18-12.29" *)
  output take_branch;
  wire take_branch;
  assign _02_ = ! (* src = "control_transfer.sv:17.36-17.54" *) result_equal_zero;
  assign _03_ = ! (* src = "control_transfer.sv:19.36-19.54" *) result_equal_zero;
  assign _04_ = ! (* src = "control_transfer.sv:21.35-21.53" *) result_equal_zero;
  function [0:0] _15_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        _15_ = b[0:0];
      6'b????1?:
        _15_ = b[1:1];
      6'b???1??:
        _15_ = b[2:2];
      6'b??1???:
        _15_ = b[3:3];
      6'b?1????:
        _15_ = b[4:4];
      6'b1?????:
        _15_ = b[5:5];
      default:
        _15_ = a;
    endcase
  endfunction
  assign _05_ = _15_(1'hx, { _02_, result_equal_zero, _03_, result_equal_zero, _04_, result_equal_zero }, { _11_, _10_, _09_, _08_, _07_, _06_ });
  assign _06_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *) 3'h7;
  assign _07_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *) 3'h6;
  assign _08_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *) 3'h5;
  assign _09_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *) 3'h4;
  assign _10_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *) 3'h1;
  assign _11_ = ! (* full_case = 32'd1 *) (* src = "control_transfer.sv:0.0-0.0|control_transfer.sv:16.9-24.16" *) inst_funct3;
  assign _00_ = _01_;
  assign _01_ = _05_;
  assign take_branch = _05_;
endmodule

(* hdlname = "\\data_memory_interface" *)
(* src = "data_memory_interface.sv:9.1-62.10" *)
module data_memory_interface(clock, read_enable, write_enable, data_format, address, write_data, read_data, bus_address, bus_read_data, bus_write_data, bus_byte_enable, bus_read_enable, bus_write_enable);
  (* src = "data_memory_interface.sv:0.0-0.0" *)
  wire [3:0] _00_;
  (* src = "data_memory_interface.sv:0.0-0.0" *)
  wire [31:0] _01_;
  (* src = "data_memory_interface.sv:0.0-0.0" *)
  wire [31:0] _02_;
  (* src = "data_memory_interface.sv:0.0-0.0" *)
  wire [3:0] _03_;
  (* src = "data_memory_interface.sv:0.0-0.0" *)
  wire [31:0] _04_;
  (* src = "data_memory_interface.sv:53.37-53.70" *)
  wire _05_;
  (* src = "data_memory_interface.sv:54.37-54.71" *)
  wire _06_;
  (* src = "data_memory_interface.sv:32.46-32.60" *)
  wire [31:0] _07_;
  (* src = "data_memory_interface.sv:47.41-47.55" *)
  wire [31:0] _08_;
  (* src = "data_memory_interface.sv:53.37-53.52" *)
  wire _09_;
  (* src = "data_memory_interface.sv:54.37-54.52" *)
  wire _10_;
  wire [31:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [3:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* src = "data_memory_interface.sv:32.31-32.61" *)
  wire [31:0] _19_;
  (* src = "data_memory_interface.sv:38.39-38.62" *)
  wire [3:0] _20_;
  (* src = "data_memory_interface.sv:39.39-39.62" *)
  wire [3:0] _21_;
  (* src = "data_memory_interface.sv:40.39-40.62" *)
  wire [3:0] _22_;
  (* src = "data_memory_interface.sv:47.23-47.56" *)
  wire [31:0] _23_;
  (* src = "data_memory_interface.sv:14.19-14.26" *)
  input [31:0] address;
  wire [31:0] address;
  (* src = "data_memory_interface.sv:18.25-18.36" *)
  output [31:0] bus_address;
  wire [31:0] bus_address;
  (* src = "data_memory_interface.sv:21.25-21.40" *)
  output [3:0] bus_byte_enable;
  wire [3:0] bus_byte_enable;
  (* src = "data_memory_interface.sv:19.25-19.38" *)
  input [31:0] bus_read_data;
  wire [31:0] bus_read_data;
  (* src = "data_memory_interface.sv:22.25-22.40" *)
  output bus_read_enable;
  wire bus_read_enable;
  (* src = "data_memory_interface.sv:20.25-20.39" *)
  output [31:0] bus_write_data;
  wire [31:0] bus_write_data;
  (* src = "data_memory_interface.sv:23.25-23.41" *)
  output bus_write_enable;
  wire bus_write_enable;
  (* src = "data_memory_interface.sv:10.12-10.17" *)
  input clock;
  wire clock;
  (* src = "data_memory_interface.sv:13.19-13.30" *)
  input [2:0] data_format;
  wire [2:0] data_format;
  (* src = "data_memory_interface.sv:26.18-26.30" *)
  wire [31:0] position_fix;
  (* src = "data_memory_interface.sv:16.19-16.28" *)
  output [31:0] read_data;
  wire [31:0] read_data;
  (* src = "data_memory_interface.sv:11.12-11.23" *)
  input read_enable;
  wire read_enable;
  (* src = "data_memory_interface.sv:27.18-27.26" *)
  wire [31:0] sign_fix;
  (* src = "data_memory_interface.sv:15.19-15.29" *)
  input [31:0] write_data;
  wire [31:0] write_data;
  (* src = "data_memory_interface.sv:12.12-12.24" *)
  input write_enable;
  wire write_enable;
  assign _05_ = _09_ & (* src = "data_memory_interface.sv:53.37-53.70" *) position_fix[7];
  assign _06_ = _10_ & (* src = "data_memory_interface.sv:54.37-54.71" *) position_fix[15];
  assign _07_ = 32'd8 * (* src = "data_memory_interface.sv:32.46-32.60" *) address[1:0];
  assign _08_ = 32'd8 * (* src = "data_memory_interface.sv:47.41-47.55" *) address[1:0];
  assign _09_ = ~ (* src = "data_memory_interface.sv:53.37-53.52" *) data_format[2];
  assign _10_ = ~ (* src = "data_memory_interface.sv:54.37-54.52" *) data_format[2];
  function [31:0] _30_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:52.8-57.15" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _30_ = b[31:0];
      3'b?1?:
        _30_ = b[63:32];
      3'b1??:
        _30_ = b[95:64];
      default:
        _30_ = a;
    endcase
  endfunction
  assign _11_ = _30_(32'hxxxxxxxx, { _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, position_fix[7:0], _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, position_fix[15:0], position_fix }, { _14_, _13_, _12_ });
  assign _12_ = data_format[1:0] == (* full_case = 32'd1 *) (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:52.8-57.15" *) 2'h2;
  assign _13_ = data_format[1:0] == (* full_case = 32'd1 *) (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:52.8-57.15" *) 2'h1;
  assign _14_ = ! (* full_case = 32'd1 *) (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:52.8-57.15" *) data_format[1:0];
  function [3:0] _34_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:37.8-42.15" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _34_ = b[3:0];
      3'b?1?:
        _34_ = b[7:4];
      3'b1??:
        _34_ = b[11:8];
      default:
        _34_ = a;
    endcase
  endfunction
  assign _15_ = _34_(4'h0, { _20_, _21_, _22_ }, { _18_, _17_, _16_ });
  assign _16_ = data_format[1:0] == (* full_case = 32'd1 *) (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:37.8-42.15" *) 2'h2;
  assign _17_ = data_format[1:0] == (* full_case = 32'd1 *) (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:37.8-42.15" *) 2'h1;
  assign _18_ = ! (* full_case = 32'd1 *) (* src = "data_memory_interface.sv:0.0-0.0|data_memory_interface.sv:37.8-42.15" *) data_format[1:0];
  assign _19_ = write_data << (* src = "data_memory_interface.sv:32.31-32.61" *) _07_;
  assign _20_ = 4'h1 << (* src = "data_memory_interface.sv:38.39-38.62" *) address[1:0];
  assign _21_ = 4'h3 << (* src = "data_memory_interface.sv:39.39-39.62" *) address[1:0];
  assign _22_ = 4'hf << (* src = "data_memory_interface.sv:40.39-40.62" *) address[1:0];
  assign _23_ = bus_read_data >> (* src = "data_memory_interface.sv:47.23-47.56" *) _08_;
  assign bus_address = address;
  assign bus_write_enable = write_enable;
  assign bus_read_enable = read_enable;
  assign bus_write_data = _19_;
  assign read_data = sign_fix;
  assign _02_ = _04_;
  assign _01_ = _23_;
  assign _00_ = _03_;
  assign _04_ = _11_;
  assign _03_ = _15_;
  assign sign_fix = _11_;
  assign position_fix = _23_;
  assign bus_byte_enable = _15_;
endmodule

(* hdlname = "\\immediate_generator" *)
(* src = "immediate_generator.sv:9.1-44.10" *)
module immediate_generator(inst, immediate);
  (* src = "immediate_generator.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "immediate_generator.sv:0.0-0.0" *)
  wire [31:0] _01_;
  wire [31:0] _02_;
  wire _03_;
  wire [1:0] _04_;
  wire _05_;
  wire _06_;
  wire [1:0] _07_;
  wire _08_;
  wire [3:0] _09_;
  wire _10_;
  (* src = "immediate_generator.sv:11.25-11.34" *)
  output [31:0] immediate;
  wire [31:0] immediate;
  (* src = "immediate_generator.sv:10.25-10.29" *)
  input [31:0] inst;
  wire [31:0] inst;
  function [31:0] _11_;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _11_ = b[31:0];
      5'b???1?:
        _11_ = b[63:32];
      5'b??1??:
        _11_ = b[95:64];
      5'b?1???:
        _11_ = b[127:96];
      5'b1????:
        _11_ = b[159:128];
      default:
        _11_ = a;
    endcase
  endfunction
  assign _02_ = _11_(32'd0, { inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31:20], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31:25], inst[11:7], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[7], inst[30:25], inst[11:8], 1'h0, inst[31:12], 12'h000, inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[19:12], inst[20], inst[30:21], 1'h0 }, { _10_, _08_, _06_, _05_, _03_ });
  assign _03_ = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h6f;
  assign _05_ = | (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) _04_;
  assign _04_[0] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h17;
  assign _04_[1] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h37;
  assign _06_ = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h63;
  assign _08_ = | (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) _07_;
  assign _07_[0] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h27;
  assign _07_[1] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h23;
  assign _10_ = | (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) _09_;
  assign _09_[0] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h03;
  assign _09_[1] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h07;
  assign _09_[2] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h13;
  assign _09_[3] = inst[6:0] == (* full_case = 32'd1 *) (* src = "immediate_generator.sv:0.0-0.0|immediate_generator.sv:24.9-41.16" *) 7'h67;
  assign _00_ = _01_;
  assign _01_ = _02_;
  assign immediate = _02_;
endmodule

(* hdlname = "\\instruction_decoder" *)
(* src = "instruction_decoder.sv:9.1-26.10" *)
module instruction_decoder(inst, inst_opcode, inst_funct3, inst_funct7, inst_rd, inst_rs1, inst_rs2);
  (* src = "instruction_decoder.sv:10.18-10.22" *)
  input [31:0] inst;
  wire [31:0] inst;
  (* src = "instruction_decoder.sv:12.18-12.29" *)
  output [2:0] inst_funct3;
  wire [2:0] inst_funct3;
  (* src = "instruction_decoder.sv:13.18-13.29" *)
  output [6:0] inst_funct7;
  wire [6:0] inst_funct7;
  (* src = "instruction_decoder.sv:11.18-11.29" *)
  output [6:0] inst_opcode;
  wire [6:0] inst_opcode;
  (* src = "instruction_decoder.sv:14.18-14.25" *)
  output [4:0] inst_rd;
  wire [4:0] inst_rd;
  (* src = "instruction_decoder.sv:15.18-15.26" *)
  output [4:0] inst_rs1;
  wire [4:0] inst_rs1;
  (* src = "instruction_decoder.sv:16.18-16.26" *)
  output [4:0] inst_rs2;
  wire [4:0] inst_rs2;
  assign inst_opcode = inst[6:0];
  assign inst_funct3 = inst[14:12];
  assign inst_funct7 = inst[31:25];
  assign inst_rd = inst[11:7];
  assign inst_rs1 = inst[19:15];
  assign inst_rs2 = inst[24:20];
endmodule

(* hdlname = "\\regfile" *)
(* src = "regfile.sv:9.1-35.10" *)
module regfile(clock, write_enable, rd_address, rs1_address, rs2_address, rd_data, rs1_data, rs2_data);
  (* src = "regfile.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [4:0] _01_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [31:0] _02_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [31:0] _03_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [4:0] _04_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [31:0] _05_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [31:0] _06_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [4:0] _07_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [31:0] _08_;
  (* src = "regfile.sv:31.5-33.69" *)
  wire [31:0] _09_;
  (* src = "regfile.sv:24.23-24.31" *)
  wire [31:0] _10_;
  (* src = "regfile.sv:25.23-25.31" *)
  wire [31:0] _11_;
  (* src = "regfile.sv:0.0-0.0" *)
  wire [31:0] _12_;
  (* src = "regfile.sv:0.0-0.0" *)
  reg [4:0] _13_;
  (* src = "regfile.sv:0.0-0.0" *)
  reg [31:0] _14_;
  (* src = "regfile.sv:0.0-0.0" *)
  reg [31:0] _15_;
  (* src = "regfile.sv:33.17-33.35" *)
  wire _16_;
  wire [31:0] _17_;
  wire _18_;
  wire [31:0] _19_;
  wire _20_;
  wire [31:0] _21_;
  wire _22_;
  wire [31:0] _23_;
  wire _24_;
  wire [4:0] _25_;
  wire _26_;
  wire [4:0] _27_;
  wire _28_;
  wire [31:0] _29_;
  wire _30_;
  wire [31:0] _31_;
  wire _32_;
  wire [4:0] _33_;
  wire _34_;
  (* src = "regfile.sv:10.12-10.17" *)
  input clock;
  wire clock;
  (* src = "regfile.sv:12.18-12.28" *)
  input [4:0] rd_address;
  wire [4:0] rd_address;
  (* src = "regfile.sv:15.19-15.26" *)
  input [31:0] rd_data;
  wire [31:0] rd_data;
  (* src = "regfile.sv:13.18-13.29" *)
  input [4:0] rs1_address;
  wire [4:0] rs1_address;
  (* src = "regfile.sv:16.19-16.27" *)
  output [31:0] rs1_data;
  wire [31:0] rs1_data;
  (* src = "regfile.sv:14.18-14.29" *)
  input [4:0] rs2_address;
  wire [4:0] rs2_address;
  (* src = "regfile.sv:17.19-17.27" *)
  output [31:0] rs2_data;
  wire [31:0] rs2_data;
  (* src = "regfile.sv:11.12-11.24" *)
  input write_enable;
  wire write_enable;
  (* src = "regfile.sv:21.18-21.26" *)
  reg [31:0] register [31:0];
  initial begin
    register[0] = 32'd0;
  end
  always @(posedge clock) begin
    if (_06_[0])
      register[_04_][0:0] <= _05_[0];
    if (_06_[1])
      register[_04_][1:1] <= _05_[1];
    if (_06_[2])
      register[_04_][2:2] <= _05_[2];
    if (_06_[3])
      register[_04_][3:3] <= _05_[3];
    if (_06_[4])
      register[_04_][4:4] <= _05_[4];
    if (_06_[5])
      register[_04_][5:5] <= _05_[5];
    if (_06_[6])
      register[_04_][6:6] <= _05_[6];
    if (_06_[7])
      register[_04_][7:7] <= _05_[7];
    if (_06_[8])
      register[_04_][8:8] <= _05_[8];
    if (_06_[9])
      register[_04_][9:9] <= _05_[9];
    if (_06_[10])
      register[_04_][10:10] <= _05_[10];
    if (_06_[11])
      register[_04_][11:11] <= _05_[11];
    if (_06_[12])
      register[_04_][12:12] <= _05_[12];
    if (_06_[13])
      register[_04_][13:13] <= _05_[13];
    if (_06_[14])
      register[_04_][14:14] <= _05_[14];
    if (_06_[15])
      register[_04_][15:15] <= _05_[15];
    if (_06_[16])
      register[_04_][16:16] <= _05_[16];
    if (_06_[17])
      register[_04_][17:17] <= _05_[17];
    if (_06_[18])
      register[_04_][18:18] <= _05_[18];
    if (_06_[19])
      register[_04_][19:19] <= _05_[19];
    if (_06_[20])
      register[_04_][20:20] <= _05_[20];
    if (_06_[21])
      register[_04_][21:21] <= _05_[21];
    if (_06_[22])
      register[_04_][22:22] <= _05_[22];
    if (_06_[23])
      register[_04_][23:23] <= _05_[23];
    if (_06_[24])
      register[_04_][24:24] <= _05_[24];
    if (_06_[25])
      register[_04_][25:25] <= _05_[25];
    if (_06_[26])
      register[_04_][26:26] <= _05_[26];
    if (_06_[27])
      register[_04_][27:27] <= _05_[27];
    if (_06_[28])
      register[_04_][28:28] <= _05_[28];
    if (_06_[29])
      register[_04_][29:29] <= _05_[29];
    if (_06_[30])
      register[_04_][30:30] <= _05_[30];
    if (_06_[31])
      register[_04_][31:31] <= _05_[31];
  end
  assign _11_ = register[rs2_address];
  assign _10_ = register[rs1_address];
  assign _16_ = | (* src = "regfile.sv:33.17-33.35" *) rd_address;
  (* \always_ff  = 32'd1 *)
  (* src = "regfile.sv:31.5-33.69" *)
  always @(posedge clock)
    _13_ <= _33_;
  (* \always_ff  = 32'd1 *)
  (* src = "regfile.sv:31.5-33.69" *)
  always @(posedge clock)
    _14_ <= _31_;
  (* \always_ff  = 32'd1 *)
  (* src = "regfile.sv:31.5-33.69" *)
  always @(posedge clock)
    _15_ <= _29_;
  assign _17_ = _18_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:33.17-33.35|regfile.sv:33.13-33.69" *) 32'd4294967295 : 32'd0;
  assign _19_ = _20_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:32.13-32.25|regfile.sv:32.9-33.69" *) _17_ : 32'hxxxxxxxx;
  assign _21_ = _22_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:33.17-33.35|regfile.sv:33.13-33.69" *) rd_data : 32'hxxxxxxxx;
  assign _23_ = _24_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:32.13-32.25|regfile.sv:32.9-33.69" *) _21_ : 32'hxxxxxxxx;
  assign _25_ = _26_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:33.17-33.35|regfile.sv:33.13-33.69" *) rd_address : 5'hxx;
  assign _27_ = _28_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:32.13-32.25|regfile.sv:32.9-33.69" *) _25_ : 5'hxx;
  assign _29_ = _30_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:32.13-32.25|regfile.sv:32.9-33.69" *) _09_ : 32'd0;
  assign _31_ = _32_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:32.13-32.25|regfile.sv:32.9-33.69" *) _08_ : 32'hxxxxxxxx;
  assign _33_ = _34_ ? (* full_case = 32'd1 *) (* src = "regfile.sv:32.13-32.25|regfile.sv:32.9-33.69" *) _07_ : 5'hxx;
  assign rs1_data = _10_;
  assign rs2_data = _11_;
  assign _00_ = 32'd4294967295;
  assign _03_ = _06_;
  assign _02_ = _05_;
  assign _01_ = _04_;
  assign _18_ = _16_;
  assign _20_ = write_enable;
  assign _09_ = _19_;
  assign _22_ = _16_;
  assign _24_ = write_enable;
  assign _08_ = _23_;
  assign _26_ = _16_;
  assign _28_ = write_enable;
  assign _07_ = _27_;
  assign _30_ = write_enable;
  assign _06_ = _29_;
  assign _32_ = write_enable;
  assign _05_ = _31_;
  assign _34_ = write_enable;
  assign _04_ = _33_;
  assign _12_ = 32'd4294967295;
endmodule

(* hdlname = "\\riscv_core" *)
(* src = "riscv_core.sv:9.1-94.10" *)
module riscv_core(clock, reset, bus_address, bus_read_data, bus_write_data, bus_byte_enable, bus_read_enable, bus_write_enable, inst, pc);
  (* src = "riscv_core.sv:37.18-37.25" *)
  wire [31:0] address;
  (* src = "riscv_core.sv:33.17-33.29" *)
  wire [4:0] alu_function;
  (* src = "riscv_core.sv:26.11-26.31" *)
  wire alu_operand_a_select;
  (* src = "riscv_core.sv:27.11-27.31" *)
  wire alu_operand_b_select;
  (* src = "riscv_core.sv:34.11-34.32" *)
  wire alu_result_equal_zero;
  (* src = "riscv_core.sv:13.19-13.30" *)
  output [31:0] bus_address;
  wire [31:0] bus_address;
  (* src = "riscv_core.sv:16.19-16.34" *)
  output [3:0] bus_byte_enable;
  wire [3:0] bus_byte_enable;
  (* src = "riscv_core.sv:14.19-14.32" *)
  input [31:0] bus_read_data;
  wire [31:0] bus_read_data;
  (* src = "riscv_core.sv:17.19-17.34" *)
  output bus_read_enable;
  wire bus_read_enable;
  (* src = "riscv_core.sv:15.19-15.33" *)
  output [31:0] bus_write_data;
  wire [31:0] bus_write_data;
  (* src = "riscv_core.sv:18.19-18.35" *)
  output bus_write_enable;
  wire bus_write_enable;
  (* src = "riscv_core.sv:10.12-10.17" *)
  input clock;
  wire clock;
  (* src = "riscv_core.sv:20.19-20.23" *)
  input [31:0] inst;
  wire [31:0] inst;
  (* src = "riscv_core.sv:30.17-30.28" *)
  wire [2:0] inst_funct3;
  (* src = "riscv_core.sv:31.17-31.28" *)
  wire [6:0] inst_funct7;
  (* src = "riscv_core.sv:29.17-29.28" *)
  wire [6:0] inst_opcode;
  (* src = "riscv_core.sv:32.17-32.31" *)
  wire [1:0] next_pc_select;
  (* src = "riscv_core.sv:21.19-21.21" *)
  output [31:0] pc;
  wire [31:0] pc;
  (* src = "riscv_core.sv:24.11-24.26" *)
  wire pc_write_enable;
  (* src = "riscv_core.sv:35.18-35.27" *)
  wire [31:0] read_data;
  (* src = "riscv_core.sv:38.11-38.22" *)
  wire read_enable;
  (* src = "riscv_core.sv:28.17-28.37" *)
  wire [2:0] reg_writeback_select;
  (* src = "riscv_core.sv:25.11-25.31" *)
  wire regfile_write_enable;
  (* src = "riscv_core.sv:11.12-11.17" *)
  input reset;
  wire reset;
  (* src = "riscv_core.sv:36.18-36.28" *)
  wire [31:0] write_data;
  (* src = "riscv_core.sv:39.11-39.23" *)
  wire write_enable;
  (* module_not_derived = 32'd1 *)
  (* src = "riscv_core.sv:78.27-92.6" *)
  data_memory_interface data_memory_interface (
    .address(address),
    .bus_address(bus_address),
    .bus_byte_enable(bus_byte_enable),
    .bus_read_data(bus_read_data),
    .bus_read_enable(bus_read_enable),
    .bus_write_data(bus_write_data),
    .bus_write_enable(bus_write_enable),
    .clock(clock),
    .data_format(inst_funct3),
    .read_data(read_data),
    .read_enable(read_enable),
    .write_data(write_data),
    .write_enable(write_enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "riscv_core.sv:62.25-76.6" *)
  singlecycle_ctlpath singlecycle_ctlpath (
    .alu_function(alu_function),
    .alu_operand_a_select(alu_operand_a_select),
    .alu_operand_b_select(alu_operand_b_select),
    .alu_result_equal_zero(alu_result_equal_zero),
    .data_mem_read_enable(read_enable),
    .data_mem_write_enable(write_enable),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7),
    .inst_opcode(inst_opcode),
    .next_pc_select(next_pc_select),
    .pc_write_enable(pc_write_enable),
    .reg_writeback_select(reg_writeback_select),
    .regfile_write_enable(regfile_write_enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "riscv_core.sv:41.26-60.6" *)
  singlecycle_datapath singlecycle_datapath (
    .alu_function(alu_function),
    .alu_operand_a_select(alu_operand_a_select),
    .alu_operand_b_select(alu_operand_b_select),
    .alu_result_equal_zero(alu_result_equal_zero),
    .clock(clock),
    .data_mem_address(address),
    .data_mem_read_data(read_data),
    .data_mem_write_data(write_data),
    .inst(inst),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7),
    .inst_opcode(inst_opcode),
    .next_pc_select(next_pc_select),
    .pc(pc),
    .pc_write_enable(pc_write_enable),
    .reg_writeback_select(reg_writeback_select),
    .regfile_write_enable(regfile_write_enable),
    .reset(reset)
  );
endmodule

(* hdlname = "\\singlecycle_control" *)
(* src = "singlecycle_control.sv:9.1-135.10" *)
module singlecycle_control(inst_opcode, take_branch, pc_write_enable, regfile_write_enable, alu_operand_a_select, alu_operand_b_select, alu_op_type, data_mem_read_enable, data_mem_write_enable, reg_writeback_select, next_pc_select);
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire [1:0] _000_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _001_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _002_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _003_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _004_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire [1:0] _005_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _006_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire [2:0] _007_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _008_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire [1:0] _009_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _010_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _011_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _012_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _013_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire [1:0] _014_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _015_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire [2:0] _016_;
  (* src = "singlecycle_control.sv:0.0-0.0" *)
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire [1:0] _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire [1:0] _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire [2:0] _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  (* src = "singlecycle_control.sv:25.42-25.69" *)
  wire [1:0] _103_;
  (* src = "singlecycle_control.sv:16.24-16.35" *)
  output [1:0] alu_op_type;
  wire [1:0] alu_op_type;
  (* src = "singlecycle_control.sv:14.18-14.38" *)
  output alu_operand_a_select;
  wire alu_operand_a_select;
  (* src = "singlecycle_control.sv:15.18-15.38" *)
  output alu_operand_b_select;
  wire alu_operand_b_select;
  (* src = "singlecycle_control.sv:17.18-17.38" *)
  output data_mem_read_enable;
  wire data_mem_read_enable;
  (* src = "singlecycle_control.sv:18.18-18.39" *)
  output data_mem_write_enable;
  wire data_mem_write_enable;
  (* src = "singlecycle_control.sv:10.18-10.29" *)
  input [6:0] inst_opcode;
  wire [6:0] inst_opcode;
  (* src = "singlecycle_control.sv:20.24-20.38" *)
  output [1:0] next_pc_select;
  wire [1:0] next_pc_select;
  (* src = "singlecycle_control.sv:12.18-12.33" *)
  output pc_write_enable;
  wire pc_write_enable;
  (* src = "singlecycle_control.sv:19.24-19.44" *)
  output [2:0] reg_writeback_select;
  wire [2:0] reg_writeback_select;
  (* src = "singlecycle_control.sv:13.18-13.38" *)
  output regfile_write_enable;
  wire regfile_write_enable;
  (* src = "singlecycle_control.sv:11.12-11.23" *)
  input take_branch;
  wire take_branch;
  assign _018_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _019_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _020_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _021_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h0f;
  assign _022_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [1:0] _109_;
    input [1:0] a;
    input [15:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _109_ = b[1:0];
      8'b??????1?:
        _109_ = b[3:2];
      8'b?????1??:
        _109_ = b[5:4];
      8'b????1???:
        _109_ = b[7:6];
      8'b???1????:
        _109_ = b[9:8];
      8'b??1?????:
        _109_ = b[11:10];
      8'b?1??????:
        _109_ = b[13:12];
      8'b1???????:
        _109_ = b[15:14];
      default:
        _109_ = a;
    endcase
  endfunction
  assign _023_ = _109_(2'hx, 16'h3090, { _031_, _030_, _029_, _028_, _027_, _026_, _025_, _024_ });
  assign _024_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _025_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _026_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _027_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _028_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _029_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _030_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _031_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _118_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        _118_ = b[0:0];
      9'b???????1?:
        _118_ = b[1:1];
      9'b??????1??:
        _118_ = b[2:2];
      9'b?????1???:
        _118_ = b[3:3];
      9'b????1????:
        _118_ = b[4:4];
      9'b???1?????:
        _118_ = b[5:5];
      9'b??1??????:
        _118_ = b[6:6];
      9'b?1???????:
        _118_ = b[7:7];
      9'b1????????:
        _118_ = b[8:8];
      default:
        _118_ = a;
    endcase
  endfunction
  assign _032_ = _118_(1'hx, 9'h1e3, { _041_, _040_, _039_, _038_, _037_, _036_, _035_, _034_, _033_ });
  assign _033_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _034_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _035_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _036_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _037_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _038_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _039_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _040_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _041_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _128_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        _128_ = b[0:0];
      9'b???????1?:
        _128_ = b[1:1];
      9'b??????1??:
        _128_ = b[2:2];
      9'b?????1???:
        _128_ = b[3:3];
      9'b????1????:
        _128_ = b[4:4];
      9'b???1?????:
        _128_ = b[5:5];
      9'b??1??????:
        _128_ = b[6:6];
      9'b?1???????:
        _128_ = b[7:7];
      9'b1????????:
        _128_ = b[8:8];
      default:
        _128_ = a;
    endcase
  endfunction
  assign _042_ = _128_(1'hx, 9'h041, { _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_ });
  assign _043_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _044_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _045_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _046_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _047_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _048_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _049_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _050_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _051_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _138_;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        _138_ = b[0:0];
      10'b????????1?:
        _138_ = b[1:1];
      10'b???????1??:
        _138_ = b[2:2];
      10'b??????1???:
        _138_ = b[3:3];
      10'b?????1????:
        _138_ = b[4:4];
      10'b????1?????:
        _138_ = b[5:5];
      10'b???1??????:
        _138_ = b[6:6];
      10'b??1???????:
        _138_ = b[7:7];
      10'b?1????????:
        _138_ = b[8:8];
      10'b1?????????:
        _138_ = b[9:9];
      default:
        _138_ = a;
    endcase
  endfunction
  assign _052_ = _138_(1'hx, 10'h2db, { _062_, _061_, _060_, _059_, _058_, _057_, _056_, _055_, _054_, _053_ });
  assign _053_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _054_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _055_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _056_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _057_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _058_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _059_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _060_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _061_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h0f;
  assign _062_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _149_;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        _149_ = b[0:0];
      10'b????????1?:
        _149_ = b[1:1];
      10'b???????1??:
        _149_ = b[2:2];
      10'b??????1???:
        _149_ = b[3:3];
      10'b?????1????:
        _149_ = b[4:4];
      10'b????1?????:
        _149_ = b[5:5];
      10'b???1??????:
        _149_ = b[6:6];
      10'b??1???????:
        _149_ = b[7:7];
      10'b?1????????:
        _149_ = b[8:8];
      10'b1?????????:
        _149_ = b[9:9];
      default:
        _149_ = a;
    endcase
  endfunction
  assign _063_ = _149_(1'hx, 10'h020, { _073_, _072_, _071_, _070_, _069_, _068_, _067_, _066_, _065_, _064_ });
  assign _064_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _065_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _066_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _067_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _068_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _069_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _070_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _071_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _072_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h0f;
  assign _073_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _160_;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        _160_ = b[0:0];
      10'b????????1?:
        _160_ = b[1:1];
      10'b???????1??:
        _160_ = b[2:2];
      10'b??????1???:
        _160_ = b[3:3];
      10'b?????1????:
        _160_ = b[4:4];
      10'b????1?????:
        _160_ = b[5:5];
      10'b???1??????:
        _160_ = b[6:6];
      10'b??1???????:
        _160_ = b[7:7];
      10'b?1????????:
        _160_ = b[8:8];
      10'b1?????????:
        _160_ = b[9:9];
      default:
        _160_ = a;
    endcase
  endfunction
  assign _074_ = _160_(1'hx, 10'h3ff, { _084_, _083_, _082_, _081_, _080_, _079_, _078_, _077_, _076_, _075_ });
  assign _075_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _076_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _077_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _078_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _079_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _080_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _081_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _082_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _083_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h0f;
  assign _084_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [1:0] _171_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:24.9-29.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _171_ = b[1:0];
      3'b?1?:
        _171_ = b[3:2];
      3'b1??:
        _171_ = b[5:4];
      default:
        _171_ = a;
    endcase
  endfunction
  assign _085_ = _171_(2'h0, { _103_, 4'h9 }, { _088_, _087_, _086_ });
  assign _086_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:24.9-29.16" *) 7'h6f;
  assign _087_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:24.9-29.16" *) 7'h67;
  assign _088_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:24.9-29.16" *) 7'h63;
  function [2:0] _175_;
    input [2:0] a;
    input [20:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        _175_ = b[2:0];
      7'b?????1?:
        _175_ = b[5:3];
      7'b????1??:
        _175_ = b[8:6];
      7'b???1???:
        _175_ = b[11:9];
      7'b??1????:
        _175_ = b[14:12];
      7'b?1?????:
        _175_ = b[17:15];
      7'b1??????:
        _175_ = b[20:18];
      default:
        _175_ = a;
    endcase
  endfunction
  assign _089_ = _175_(3'hx, 21'h0400d2, { _096_, _095_, _094_, _093_, _092_, _091_, _090_ });
  assign _090_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _091_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _092_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _093_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _094_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _095_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _096_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _183_;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* full_case = 32'd1 *)
    (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        _183_ = b[0:0];
      10'b????????1?:
        _183_ = b[1:1];
      10'b???????1??:
        _183_ = b[2:2];
      10'b??????1???:
        _183_ = b[3:3];
      10'b?????1????:
        _183_ = b[4:4];
      10'b????1?????:
        _183_ = b[5:5];
      10'b???1??????:
        _183_ = b[6:6];
      10'b??1???????:
        _183_ = b[7:7];
      10'b?1????????:
        _183_ = b[8:8];
      10'b1?????????:
        _183_ = b[9:9];
      default:
        _183_ = a;
    endcase
  endfunction
  assign _097_ = _183_(1'hx, 10'h200, { _022_, _021_, _020_, _019_, _018_, _102_, _101_, _100_, _099_, _098_ });
  assign _098_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _099_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _100_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _101_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _102_ = inst_opcode == (* full_case = 32'd1 *) (* src = "singlecycle_control.sv:0.0-0.0|singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _103_ = take_branch ? (* src = "singlecycle_control.sv:25.42-25.69" *) 2'h1 : 2'h0;
  assign _000_ = _009_;
  assign _004_ = _013_;
  assign _003_ = _012_;
  assign _007_ = _016_;
  assign _002_ = _011_;
  assign _001_ = _010_;
  assign _008_ = _017_;
  assign _006_ = _015_;
  assign _005_ = _014_;
  assign _016_ = _089_;
  assign _012_ = _097_;
  assign _009_ = _023_;
  assign _011_ = _032_;
  assign _010_ = _042_;
  assign _017_ = _052_;
  assign _013_ = _063_;
  assign _015_ = _074_;
  assign _014_ = _085_;
  assign pc_write_enable = _074_;
  assign regfile_write_enable = _052_;
  assign alu_operand_a_select = _042_;
  assign alu_operand_b_select = _032_;
  assign reg_writeback_select = _089_;
  assign data_mem_read_enable = _097_;
  assign data_mem_write_enable = _063_;
  assign alu_op_type = _023_;
  assign next_pc_select = _085_;
endmodule

(* hdlname = "\\singlecycle_ctlpath" *)
(* src = "singlecycle_ctlpath.sv:9.1-56.10" *)
module singlecycle_ctlpath(inst_opcode, inst_funct3, inst_funct7, alu_result_equal_zero, pc_write_enable, regfile_write_enable, alu_operand_a_select, alu_operand_b_select, data_mem_read_enable, data_mem_write_enable, reg_writeback_select, alu_function, next_pc_select);
  (* src = "singlecycle_ctlpath.sv:22.18-22.30" *)
  output [4:0] alu_function;
  wire [4:0] alu_function;
  (* src = "singlecycle_ctlpath.sv:27.17-27.28" *)
  wire [1:0] alu_op_type;
  (* src = "singlecycle_ctlpath.sv:17.12-17.32" *)
  output alu_operand_a_select;
  wire alu_operand_a_select;
  (* src = "singlecycle_ctlpath.sv:18.12-18.32" *)
  output alu_operand_b_select;
  wire alu_operand_b_select;
  (* src = "singlecycle_ctlpath.sv:13.12-13.33" *)
  input alu_result_equal_zero;
  wire alu_result_equal_zero;
  (* src = "singlecycle_ctlpath.sv:19.12-19.32" *)
  output data_mem_read_enable;
  wire data_mem_read_enable;
  (* src = "singlecycle_ctlpath.sv:20.12-20.33" *)
  output data_mem_write_enable;
  wire data_mem_write_enable;
  (* src = "singlecycle_ctlpath.sv:11.18-11.29" *)
  input [2:0] inst_funct3;
  wire [2:0] inst_funct3;
  (* src = "singlecycle_ctlpath.sv:12.18-12.29" *)
  input [6:0] inst_funct7;
  wire [6:0] inst_funct7;
  (* src = "singlecycle_ctlpath.sv:10.18-10.29" *)
  input [6:0] inst_opcode;
  wire [6:0] inst_opcode;
  (* src = "singlecycle_ctlpath.sv:23.18-23.32" *)
  output [1:0] next_pc_select;
  wire [1:0] next_pc_select;
  (* src = "singlecycle_ctlpath.sv:15.12-15.27" *)
  output pc_write_enable;
  wire pc_write_enable;
  (* src = "singlecycle_ctlpath.sv:21.18-21.38" *)
  output [2:0] reg_writeback_select;
  wire [2:0] reg_writeback_select;
  (* src = "singlecycle_ctlpath.sv:16.12-16.32" *)
  output regfile_write_enable;
  wire regfile_write_enable;
  (* src = "singlecycle_ctlpath.sv:26.11-26.22" *)
  wire take_branch;
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_ctlpath.sv:49.17-54.6" *)
  alu_control alu_control (
    .alu_function(alu_function),
    .alu_op_type(alu_op_type),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_ctlpath.sv:43.22-47.6" *)
  control_transfer control_transfer (
    .inst_funct3(inst_funct3),
    .result_equal_zero(alu_result_equal_zero),
    .take_branch(take_branch)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_ctlpath.sv:29.25-41.6" *)
  singlecycle_control singlecycle_control (
    .alu_op_type(alu_op_type),
    .alu_operand_a_select(alu_operand_a_select),
    .alu_operand_b_select(alu_operand_b_select),
    .data_mem_read_enable(data_mem_read_enable),
    .data_mem_write_enable(data_mem_write_enable),
    .inst_opcode(inst_opcode),
    .next_pc_select(next_pc_select),
    .pc_write_enable(pc_write_enable),
    .reg_writeback_select(reg_writeback_select),
    .regfile_write_enable(regfile_write_enable),
    .take_branch(take_branch)
  );
endmodule

(* hdlname = "\\singlecycle_datapath" *)
(* src = "singlecycle_datapath.sv:9.1-165.10" *)
module singlecycle_datapath(clock, reset, data_mem_read_data, data_mem_address, data_mem_write_data, inst, pc, inst_opcode, inst_funct3, inst_funct7, alu_result_equal_zero, pc_write_enable, regfile_write_enable, alu_operand_a_select, alu_operand_b_select, reg_writeback_select, next_pc_select, alu_function);
  (* src = "singlecycle_datapath.sv:32.17-32.29" *)
  input [4:0] alu_function;
  wire [4:0] alu_function;
  (* src = "singlecycle_datapath.sv:49.18-49.31" *)
  wire [31:0] alu_operand_a;
  (* src = "singlecycle_datapath.sv:28.11-28.31" *)
  input alu_operand_a_select;
  wire alu_operand_a_select;
  (* src = "singlecycle_datapath.sv:50.18-50.31" *)
  wire [31:0] alu_operand_b;
  (* src = "singlecycle_datapath.sv:29.11-29.31" *)
  input alu_operand_b_select;
  wire alu_operand_b_select;
  (* src = "singlecycle_datapath.sv:51.18-51.28" *)
  wire [31:0] alu_result;
  (* src = "singlecycle_datapath.sv:23.12-23.33" *)
  output alu_result_equal_zero;
  wire alu_result_equal_zero;
  (* src = "singlecycle_datapath.sv:10.12-10.17" *)
  input clock;
  wire clock;
  (* src = "singlecycle_datapath.sv:14.19-14.35" *)
  output [31:0] data_mem_address;
  wire [31:0] data_mem_address;
  (* src = "singlecycle_datapath.sv:13.19-13.37" *)
  input [31:0] data_mem_read_data;
  wire [31:0] data_mem_read_data;
  (* src = "singlecycle_datapath.sv:15.19-15.38" *)
  output [31:0] data_mem_write_data;
  wire [31:0] data_mem_write_data;
  (* src = "singlecycle_datapath.sv:54.18-54.27" *)
  wire [31:0] immediate;
  (* src = "singlecycle_datapath.sv:17.19-17.23" *)
  input [31:0] inst;
  wire [31:0] inst;
  (* src = "singlecycle_datapath.sv:21.18-21.29" *)
  output [2:0] inst_funct3;
  wire [2:0] inst_funct3;
  (* src = "singlecycle_datapath.sv:22.18-22.29" *)
  output [6:0] inst_funct7;
  wire [6:0] inst_funct7;
  (* src = "singlecycle_datapath.sv:20.18-20.29" *)
  output [6:0] inst_opcode;
  wire [6:0] inst_opcode;
  (* src = "singlecycle_datapath.sv:39.19-39.26" *)
  wire [4:0] inst_rd;
  (* src = "singlecycle_datapath.sv:40.19-40.27" *)
  wire [4:0] inst_rs1;
  (* src = "singlecycle_datapath.sv:41.19-41.27" *)
  wire [4:0] inst_rs2;
  (* src = "singlecycle_datapath.sv:46.18-46.25" *)
  wire [31:0] next_pc;
  (* src = "singlecycle_datapath.sv:31.17-31.31" *)
  input [1:0] next_pc_select;
  wire [1:0] next_pc_select;
  (* src = "singlecycle_datapath.sv:18.19-18.21" *)
  output [31:0] pc;
  wire [31:0] pc;
  (* src = "singlecycle_datapath.sv:44.18-44.27" *)
  wire [31:0] pc_plus_4;
  (* src = "singlecycle_datapath.sv:45.18-45.35" *)
  wire [31:0] pc_plus_immediate;
  (* src = "singlecycle_datapath.sv:26.11-26.26" *)
  input pc_write_enable;
  wire pc_write_enable;
  (* src = "singlecycle_datapath.sv:36.18-36.25" *)
  wire [31:0] rd_data;
  (* src = "singlecycle_datapath.sv:30.17-30.37" *)
  input [2:0] reg_writeback_select;
  wire [2:0] reg_writeback_select;
  (* src = "singlecycle_datapath.sv:27.11-27.31" *)
  input regfile_write_enable;
  wire regfile_write_enable;
  (* src = "singlecycle_datapath.sv:11.12-11.17" *)
  input reset;
  wire reset;
  (* src = "singlecycle_datapath.sv:37.18-37.26" *)
  wire [31:0] rs1_data;
  (* src = "singlecycle_datapath.sv:38.18-38.26" *)
  wire [31:0] rs2_data;
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:62.7-66.6" *)
  \$paramod\adder\WIDTH=s32'00000000000000000000000000100000  adder_pc_plus_4 (
    .operand_a(32'd4),
    .operand_b(pc),
    .result(pc_plus_4)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:70.7-74.6" *)
  \$paramod\adder\WIDTH=s32'00000000000000000000000000100000  adder_pc_plus_immediate (
    .operand_a(pc),
    .operand_b(immediate),
    .result(pc_plus_immediate)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:76.9-82.6" *)
  alu alu (
    .alu_function(alu_function),
    .operand_a(alu_operand_a),
    .operand_b(alu_operand_b),
    .result(alu_result),
    .result_equal_zero(alu_result_equal_zero)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:160.25-163.6" *)
  immediate_generator immediate_generator (
    .immediate(immediate),
    .inst(inst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:150.25-158.6" *)
  instruction_decoder instruction_decoder (
    .inst(inst),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7),
    .inst_opcode(inst_opcode),
    .inst_rd(inst_rd),
    .inst_rs1(inst_rs1),
    .inst_rs2(inst_rs2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:86.7-93.6" *)
  \$paramod\multiplexer4\WIDTH=s32'00000000000000000000000000100000  mux_next_pc_select (
    .in0(pc_plus_4),
    .in1(pc_plus_immediate),
    .in2({ alu_result[31:1], 1'h0 }),
    .in3(32'd0),
    .out(next_pc),
    .sel(next_pc_select)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:97.7-102.6" *)
  \$paramod\multiplexer2\WIDTH=s32'00000000000000000000000000100000  mux_operand_a (
    .in0(rs1_data),
    .in1(pc),
    .out(alu_operand_a),
    .sel(alu_operand_a_select)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:106.7-111.6" *)
  \$paramod\multiplexer2\WIDTH=s32'00000000000000000000000000100000  mux_operand_b (
    .in0(rs2_data),
    .in1(immediate),
    .out(alu_operand_b),
    .sel(alu_operand_b_select)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:115.7-126.6" *)
  \$paramod\multiplexer8\WIDTH=s32'00000000000000000000000000100000  mux_reg_writeback (
    .in0(alu_result),
    .in1(data_mem_read_data),
    .in2(pc_plus_4),
    .in3(immediate),
    .in4(32'd0),
    .in5(32'd0),
    .in6(32'd0),
    .in7(32'd0),
    .out(rd_data),
    .sel(reg_writeback_select)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:131.7-137.6" *)
  \$paramod$e358a763f16798cd10903dfd37e7986c0fbbe40f\register  program_counter (
    .clock(clock),
    .next(next_pc),
    .reset(reset),
    .value(pc),
    .write_enable(pc_write_enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "singlecycle_datapath.sv:139.13-148.6" *)
  regfile regfile (
    .clock(clock),
    .rd_address(inst_rd),
    .rd_data(rd_data),
    .rs1_address(inst_rs1),
    .rs1_data(rs1_data),
    .rs2_address(inst_rs2),
    .rs2_data(rs2_data),
    .write_enable(regfile_write_enable)
  );
  assign data_mem_address = alu_result;
  assign data_mem_write_data = rs2_data;
endmodule

(* hdlname = "\\toplevel" *)
(* top =  1  *)
(* src = "toplevel.sv:9.1-53.10" *)
module toplevel(clock, reset, bus_read_data, bus_address, bus_write_data, bus_byte_enable, bus_read_enable, bus_write_enable, inst, pc);
  (* src = "toplevel.sv:14.19-14.30" *)
  output [31:0] bus_address;
  wire [31:0] bus_address;
  (* src = "toplevel.sv:16.19-16.34" *)
  output [3:0] bus_byte_enable;
  wire [3:0] bus_byte_enable;
  (* src = "toplevel.sv:13.19-13.32" *)
  output [31:0] bus_read_data;
  wire [31:0] bus_read_data;
  (* src = "toplevel.sv:17.19-17.34" *)
  output bus_read_enable;
  wire bus_read_enable;
  (* src = "toplevel.sv:15.19-15.33" *)
  output [31:0] bus_write_data;
  wire [31:0] bus_write_data;
  (* src = "toplevel.sv:18.19-18.35" *)
  output bus_write_enable;
  wire bus_write_enable;
  (* src = "toplevel.sv:10.12-10.17" *)
  input clock;
  wire clock;
  (* src = "toplevel.sv:20.19-20.23" *)
  output [31:0] inst;
  wire [31:0] inst;
  (* src = "toplevel.sv:21.19-21.21" *)
  output [31:0] pc;
  wire [31:0] pc;
  (* src = "toplevel.sv:11.12-11.17" *)
  input reset;
  wire reset;
  (* module_not_derived = 32'd1 *)
  (* src = "toplevel.sv:24.16-35.6" *)
  riscv_core riscv_core (
    .bus_address(bus_address),
    .bus_byte_enable(bus_byte_enable),
    .bus_read_data(bus_read_data),
    .bus_read_enable(bus_read_enable),
    .bus_write_data(bus_write_data),
    .bus_write_enable(bus_write_enable),
    .clock(clock),
    .inst(inst),
    .pc(pc),
    .reset(reset)
  );
endmodule
